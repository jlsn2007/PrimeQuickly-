/*BASE DE DATOS DEL SISTEMA DE GESTIONAMIENTO DE HORAS SOCIALES "Quickly"*/

//CREACIÓN DEL USUARIO DE PREFERENCIA PARA EJECUTAR LA BASE

/*
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

CREATE USER Quickly IDENTIFIED BY "QUICKLY";

GRANT "CONNECT" TO Quickly
*/

///////// TABLA ASISTENCIA, EN ESTA TABLA SE GUARDARÁN LOS DATOS RELACIONADOS A LA TOMA DE ASISTENCIA Y TODO LO QUE ES NECESARIO PARA
///////// RECOPILAR LA INFORMACIÓN NECESARIA

CREATE TABLE Asistencia (
    UUID_asistencia VARCHAR2 (50) PRIMARY KEY,
    hora_de_entrada VARCHAR2 (6) NOT NULL,
    hora_de_salida VARCHAR2 (6) NOT NULL,
    asistencia_total INT NOT NULL,
    UUID_Evento VARCHAR2 (50) NOT NULL,
    FOREIGN KEY (UUID_Evento) REFERENCES Eventos (UUID_Evento) //LLAVE FORANEA RELACIONADA CON LA TABLA Eventos
);

SELECT * FROM Asistencia;
DROP TABLE Asistencia

INSERT INTO Asistencia (UUID_asistencia, hora_de_entrada, hora_de_salida, asistencia_total, UUID_Evento) VALUES (1, '4:30', '5:40', 1, 1);
INSERT INTO Asistencia (UUID_asistencia, hora_de_entrada, hora_de_salida, asistencia_total, UUID_Evento) VALUES (2, '3:40', '5:50', 1, 2);

///////// TABLA EVENTOS, EN ESTA TABLA SE GUARDARÁN LOS DATOS RELACIONADOS AL REGISTRO DE NUEVOS EVENTOS
///////// RECOPILANDO LA INFORMACIÓN NECESARIA PARA QUE LOS ESTUDIANTES PUEDAN ASISTIR AL EVENTO DESARROLLADO POR DIFERENTE COMISIÓN O COMITÉ

CREATE TABLE Eventos (
    UUID_Evento VARCHAR2 (50) PRIMARY KEY,
    UUID_Usuario VARCHAR2 (50) NOT NULL,
    lugar VARCHAR2 (100) NOT NULL,
    descripcion VARCHAR2 (100) NOT NULL,
    nombre VARCHAR2 (30) NOT NULL,
    fecha DATE NOT NULL,
    hora VARCHAR2 (50) NOT NULL,
    FOREIGN KEY (UUID_Usuario) REFERENCES Usuario (UUID_Usuario) //LLAVE FORANEA RELACIONADA CON LA TABLA Usuario
);

SELECT * FROM Eventos;
DROP TABLE Eventos

INSERT INTO Eventos (UUID_Evento, UUID_Usuario, lugar, descripcion, nombre, fecha, hora)  
VALUES (1, 1, 'Auditorio', 'Conferencia sobre educación', 'Conferencia Educativa', '2024-07-01', '12:00');
INSERT INTO Eventos (UUID_Evento, UUID_Usuario, lugar, descripcion, nombre, fecha, hora)  
VALUES (2, 2, 'Cancha de deportes', 'Torneo de fútbol intergrados', 'Torneo de Fútbol', '2024-07-05', '14:00');
INSERT INTO Eventos (UUID_Evento, UUID_Usuario, lugar, descripcion, nombre, fecha, hora)  
VALUES (3, 3, 'SUM', 'Torneo de Ping Pong', 'Ping Pong Salesiano', '2024-07-05', '14:00');


///////// TABLA USUARIO, EN ESTA TABLA SE GUARDARÁN LOS DATOS NECESARIOS PARA GUARDAR UN USUARIO NUEVO

CREATE TABLE Usuario (
    UUID_Usuario VARCHAR2 (50) PRIMARY KEY,
    nombre VARCHAR2 (100) NOT NULL,
    id_grado INT,
    id_rol INT NOT NULL,
    id_comite INT,
    contraseña VARCHAR2 (64) NOT NULL,
    correo_electronico VARCHAR2 (100) NOT NULL,
    FOREIGN KEY (id_grado) REFERENCES Grado (id_grado),        //LLAVE FORANEA RELACIONADA CON LA TABLA Grado
    FOREIGN KEY (id_rol) REFERENCES Rol (id_rol),              //LLAVE FORANEA RELACIONADA CON LA TABLA Rol
    FOREIGN KEY (id_comite) REFERENCES Comite (id_comite)      //LLAVE FORANEA RELACIONADA CON LA TABLA Comite
);

SELECT * FROM Usuario;
DROP TABLE Usuario

INSERT INTO Usuario (UUID_Usuario, nombre, id_grado, id_rol, id_comite, contraseña, correo_electronico) 
VALUES (1, 'Juan Pérez', 1, 1, 1, '123', 'juan.perez@ricaldone.edu.sv');
INSERT INTO Usuario (UUID_Usuario, nombre, id_grado, id_rol, id_comite, contraseña, correo_electronico) 
VALUES (2, 'María López', 2, 1, 2, '123', 'maria.lopez@ricaldone.edu.sv');
INSERT INTO Usuario (UUID_Usuario, nombre, id_grado, id_rol, id_comite, contraseña, correo_electronico) 
VALUES (3, 'Manuel Saravia', 1, 1, 3, '777', 'manuel@ricaldone.edu.sv');


///////// TABLA GRADO, PERMITE TENER EL REGISTRO DE LOS GRADOS A LOS QUE CORRESPONDE CADA ESTUDIANTE

CREATE TABLE Grado (
    id_grado INT PRIMARY KEY,
    grado VARCHAR2(50) NOT NULL
);

SELECT * FROM Grado;
DROP TABLE Grado

INSERT INTO Grado (id_grado, grado) VALUES (1, 'Primer año');
INSERT INTO Grado (id_grado, grado) VALUES (2, 'Segundo año');

///////// TABLA ROL, LOS 3 ROLES DE USUARIO ESTARÁN REGISTRADOS EN ESTA TABLA, TODO CON EL FIN DE PODER LLEVAR UN ORDEN Y QUE 
///////// CADA NIVÉL DE USUARIO TENGA SUS PRIVILEGIOS, SIENDO EL ADMIN EL QUE TIENE ACCESO A TODOS

CREATE TABLE Rol (
    id_rol INT PRIMARY KEY,
    tipo_rol VARCHAR2(50) NOT NULL
);

SELECT * FROM Rol;
DROP TABLE Rol

INSERT INTO Rol (id_rol, tipo_rol) VALUES (1, 'Estudiante');
INSERT INTO Rol (id_rol, tipo_rol) VALUES (2, 'Coordinador');
INSERT INTO Rol (id_rol, tipo_rol) VALUES (3, 'Administrador');

///////// TABLA COMITE, EN ESTA TABLA ESTAN REGISTRADOS LOS DIFERENTES COMITES LOS CUÁLES REALIZAN DIFERENTES EVENTOS PARA QUE CADA ESTUDIANTE 
///////// PUEDA REALIZAR SU SERVICIO SOCIAL SEGÚN EL COMITÉ QUE ELIGIÓ

CREATE TABLE Comite (
    id_comite INT PRIMARY KEY,
    comite VARCHAR2(100) NOT NULL, 
    descripcion VARCHAR2 (300) NOT NULL,
    cupos INT NOT NULL
);

SELECT * FROM Comite;
DROP TABLE Comite

INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (1, 'Seguridad y emergencia', 'Encargado de la seguridad del instituto, primeros auxilios y control en situaciones de riesgo', 10);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (2, 'Deportivo', 'Organizadores de los eventos deportivos del instituto', 8);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (3, 'Logistica', 'Organizadores de los eventos deportivos del instituto', 35);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (4, 'Comunicaciones', 'Organizadores de los eventos deportivos del instituto', 23);
INSERT INTO Comite (id_comite, comite, descripcion, cupos)
VALUES (5, 'Social y protocolo', 'Organizadores de los eventos deportivos del instituto', 10);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (6, 'Tecnico Cientifico', 'Organizadores de los eventos deportivos del instituto', 35);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (7, 'Medio Ambiente', 'Organizadores de los eventos deportivos del instituto', 22);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (8, 'Vida Comunitaria', 'Organizadores de los eventos deportivos del instituto', 20);
INSERT INTO Comite (id_comite, comite, descripcion, cupos) 
VALUES (9, 'Cultural', 'Organizadores de los eventos deportivos del instituto', 15);

///////// TABLA RECLAMO, ESTA TABLA REGISTRA Y ADMINISTRA LOS MENSAJES QUE PERMITIRÁN LA INTERACCIÓN ENTRE USUARIOS POR MEDIO DE TEXTO

CREATE TABLE Reclamo (
    id_mensaje INT PRIMARY KEY,
    UUID_Usuario VARCHAR2 (50) NOT NULL,
    mensaje VARCHAR2 (300) NOT NULL,
    FOREIGN KEY (UUID_Usuario) REFERENCES Usuario (UUID_Usuario) //LLAVE FORANEA RELACIONADA CON LA TABLA Usuario
); 

SELECT * FROM Reclamo;
DROP TABLE Reclamo

INSERT INTO Reclamo (id_mensaje, UUID_Usuario, mensaje) VALUES (1, 1, 'Tengo un problema con mis horas, no me las han contado');
INSERT INTO Reclamo (id_mensaje, UUID_Usuario, mensaje) VALUES (2, 2, 'Falta de coordinacion en mis horas sociales');


///////// TABLA EXPEDIENTE, ESTA TABLA LLEVA EL REGISTRO DE LAS HORAS SOCIALES DE CADA ESTUDIANTE SEGÚN SU ID, PARA PODER VER EL 
///////// HISTORIAL DE LAS HORAS SOCIALES QUE LLEVA

CREATE TABLE Expediente (
    UUID_expediente VARCHAR2(50) PRIMARY KEY,
    UUID_Usuario Varchar2(50) NOT NULL,
    nombre_evento VARCHAR2(100) NOT NULL,
    horas_agregadas INT NOT NULL,
    FOREIGN KEY (UUID_Usuario) REFERENCES Usuario (UUID_Usuario)  //LLAVE FORANEA RELACIONADA CON LA TABLA Usuario
);

SELECT * FROM Expediente;
DROP TABLE Expediente

///////// TABLA AUDITORIA, ESTA TABLA CUMPLE LA NECESIDAD DE LLEVAR EL REGISTRO DE CADA ACCIÓN REALIZADA EN LAS TABLAS 
///////// LAS CUÁLES REQUIEREN DE ACCIONES COMO INSERTAR Y ELIMINAR, ADEMÁS DE REGISTRAR CUANDO Y QUIÉN REALIZÓ LA ACCIÓN

CREATE TABLE Auditoria(
usuario VARCHAR2 (50) NOT NULL,
accion VARCHAR2 (50) NOT NULL,
tabla VARCHAR2 (20) NOT NULL,
fecha DATE NOT NULL
);

SELECT * FROM Auditoria;
DROP TABLE Auditoria
    

///////// SECUENCIA Expediente PARA QUE EL UUID_expediente INCREMENTE DESDE 1 EN ADELANTE

CREATE SEQUENCE secExpediente START WITH 1 INCREMENT BY 1;

///////// TRIGGER Expediente, PERMITE UTILIZAR LA SECUENCIA QUE CREAMOS ANTERIORMENTE Y DANDOLE UNA SINTAXIS PARA QUE NO SEA TAN SIMPLE
//////// SINÓ PONIENDOLE EL TEXTO "Expediente- HORA Y FECHA - secExpediente PARA LLEVAR ORDEN DE CADA EXPEDIENTE"

CREATE OR REPLACE TRIGGER trigExpediente
BEFORE INSERT ON Expediente
FOR EACH ROW
BEGIN
    :NEW.UUID_expediente := 'Expediente-' || SYSDATE || '-' || LPAD(secExpediente.NEXTVAL, 4, '0');
END;

///////// SECUENCIA ID_COMITES, INDICARÁ QUE EL NÚMERO DE ID INCREMENTE DE 1 EN 1, EMPEZANDO DESDE 1

CREATE SEQUENCE comite_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

///////// TRIGGER ID_COMITES, PERMITE QUE LA SECUENCIA CREADA ANTERIORMENTE SEA UTILIZADA EN EL "id_comite"

CREATE OR REPLACE TRIGGER comite_bir
BEFORE INSERT ON Comite
FOR EACH ROW
BEGIN
  :new.id_comite := comite_seq.NEXTVAL;
END;


///////// TRIGGER INSERT Usuario, ESTE TRIGGER PERMITE QUE SE REGISTRE LA ACCIÓN DE INSERTAR DATOS EN LA TABLA "Usuario", QUE GUARDE CUANDO 
///////// Y QUIÉN REALIZÓ LA INSERCIÓN EN LA TABLA AUDITORIA PERMITIENDO LLEVAR ASÍ REGISTRO DE LA ACCIÓN QUE SE HA LLEVADO A CABO

CREATE OR REPLACE TRIGGER tingresoUsuario
BEFORE INSERT ON Usuario
FOR EACH ROW
BEGIN
INSERT INTO Auditoria VALUES (user, 'Insert', 'Usuarios', sysdate);
END tingresoUsuario;

///////// TRIGGER DELETE Usuario, ESTE TRIGGER PERMITE QUE SE REGISTRE LA ACCIÓN DE ELIMINIAR DATOS EN LA TABLA "Usuario",QUE GUARDE CUANDO 
///////// Y QUIÉN ELIMINÓ EN LA TABLA AUDITORIA PERMITIENDO LLEVAR ASÍ REGISTRO DE LA ACCIÓN QUE SE HA LLEVADO A CABO

CREATE OR REPLACE TRIGGER teliminarUsuario
BEFORE DELETE ON Usuario
FOR EACH ROW
BEGIN
INSERT INTO Auditoria VALUES (user, 'Delete', 'Usuario', sysdate);
END teliminarUsuario;

///////// TRIGGER INSERT Eventos, ESTE TRIGGER PERMITE QUE SE REGISTRE LA ACCIÓN DE INSERTAR DATOS EN LA TABLA "Eventos", QUE GUARDE CUANDO 
///////// Y QUIÉN REALIZÓ LA INSERCIÓN EN LA TABLA AUDITORIA PERMITIENDO LLEVAR ASÍ REGISTRO DE LA ACCIÓN QUE SE HA LLEVADO A CABO

CREATE OR REPLACE TRIGGER tingresoEvento
BEFORE INSERT ON Eventos
FOR EACH ROW
BEGIN
INSERT INTO Auditoria VALUES (user, 'Insert', 'Eventos', sysdate);
END tingresoEvento;

///////// TRIGGER DELETE Eventos, ESTE TRIGGER PERMITE QUE SE REGISTRE LA ACCIÓN DE ELIMINIAR DATOS EN LA TABLA "Eventos",QUE GUARDE CUANDO 
///////// Y QUIÉN ELIMINÓ EN LA TABLA AUDITORIA PERMITIENDO LLEVAR ASÍ REGISTRO DE LA ACCIÓN QUE SE HA LLEVADO A CABO

CREATE OR REPLACE TRIGGER teliminarEvento
BEFORE DELETE ON Eventos
FOR EACH ROW
BEGIN
INSERT INTO Auditoria VALUES (user, 'Delete', 'Eventos', sysdate);
END teliminarEvento;
    
///////// PROCEDIMIENTO ACTUALIZAR USUARIO, ESTE PROCEDIMIENTO PERMITE QUE A LA HORA DE QUE UN USUARIO CAMBIA DE GRADO O DE ROL
///////// SEGÚN DECIDA EL ADMINISTRADOR, LE PERMITIRÁ ACTUALIZAR LOS DATOS NECESARIOS DEL USUARIO

CREATE OR REPLACE PROCEDURE ACTUALIZAR_USUARIO(
u_UUID_Usuario IN Usuario.UUID_Usuario%TYPE,
u_nombre IN Usuario.nombre%TYPE,
u_id_grado IN Usuario.id_grado%TYPE,
u_id_rol IN Usuario.id_rol%TYPE,
u_id_comite IN Usuario.id_comite%TYPE,
u_contraseña IN Usuario.contraseña%TYPE,
u_correo_electronico IN Usuario.correo_electronico%TYPE
)
AS
BEGIN
    UPDATE Usuario SET
    nombre = u_nombre,
    id_grado = u_id_grado,
    id_rol = u_id_rol,
    id_comite = u_id_comite,
    contraseña = u_contraseña,
    correo_electronico = u_correo_electronico
    WHERE UUID_Usuario = u_UUID_Usuario;
END ACTUALIZAR_USUARIO;

BEGIN
ACTUALIZAR_USUARIO('1', 'José Leví', 1, 1, 1, '20230170', '20230170@ricaldone.edu.sv'); 
END;

SELECT * FROM Usuario;

COMMIT;


///////// INNER JOIN PARA REUNIR LOS DATOS MÁS RELEVANTES DE CADA TABLA Y ASÍ PODER TENER INFORMACIÓN GENERAL DE TODAS LAS TABLAS

SELECT 
    u.nombre AS Usuario,
    g.grado AS Grado,
    r.tipo_rol AS Rol,
    c.comite AS Comite
FROM 
    Usuario u
    LEFT JOIN Grado g ON u.id_grado = g.id_grado
    LEFT JOIN Rol r ON u.id_rol = r.id_rol
    LEFT JOIN Comite c ON u.id_comite = c.id_comite
            
                
